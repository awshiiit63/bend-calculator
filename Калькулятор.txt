С
`html
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Калькулятор параметров гибки — рабочая версия</title>
  <style>
    body{background:#f2f2f2;font-family:Arial,Helvetica,sans-serif;color:#222;margin:0;padding:20px;}
    .wrap{max-width:920px;margin:0 auto;}
    h1{text-align:center;margin:0 0 8px;font-size:1.6rem;}
    p.lead{text-align:center;color:#666;margin:0 0 18px;}
    .panel{background:#fff;padding:18px;border-radius:10px;box-shadow:0 6px 18px rgba(0,0,0,0.06);}
    .row{display:flex;gap:12px;flex-wrap:wrap;}
    label{display:block;font-weight:600;margin-top:8px;font-size:0.95rem;}
    .col{flex:1 1 180px;min-width:160px;}
    input,select,button{width:100%;box-sizing:border-box;padding:8px;border-radius:6px;border:1px solid #cfcfcf;font-size:1rem}
    button{background:#0077cc;color:#fff;border:0;margin-top:10px;cursor:pointer}
    button:hover{background:#005fa3}
    .result{margin-top:16px;padding:12px;border-radius:8px;background:#fafafa;border:1px solid #eee}
    .diagram{margin-top:18px;text-align:center;padding:14px;border-radius:10px;background:#fff;border:1px solid #f0f0f0}
    svg{max-width:460px;width:100%;height:300px}
    .muted{color:#666;font-size:0.95rem}
    .error{color:#b00020;font-weight:700}
  </style>
</head>
<body>
  <div class="wrap">
    <h1>Калькулятор параметров гибки</h1>
    <p class="lead">Проверенная рабочая версия. Вводи значения и смотри результат + схему.</p>

    <div class="panel">
      <div class="row">
        <div class="col">
          <label for="s">Толщина материала S (мм)</label>
          <input id="s" type="number" step="0.01" value="2" min="0.01">
        </div>

        <div class="col">
          <label for="r">Радиус скругления R (мм)</label>
          <input id="r" type="number" step="0.1" value="10" min="0.1">
        </div>

        <div class="col">
          <label for="h">Высота изделия h (мм)</label>
          <input id="h" type="number" step="0.1" value="50" min="0">
        </div>

        <div class="col">
          <label for="b">Предел текучести σ<sub>т</sub> (МПа)</label>
          <input id="b" type="number" step="1" value="250" min="0">
        </div>

        <div class="col">
          <label for="b1">Предел прочности σ<sub>в</sub> (МПа)</label>
          <input id="b1" type="number" step="1" value="400" min="0">
        </div>

        <div class="col">
          <label for="formType">Тип гибки</label>
          <select id="formType">
            <option value="p">I-образная</option>
            <option value="v">V-образная</option>
          </select>
        </div>
      </div>

      <button id="btnCalc">Рассчитать</button>

      <div id="result" class="result">
        Результаты появятся здесь.
      </div>
    </div>

    <div class="diagram">
      <div class="muted">Визуализация гибки (масштаб для наглядности)</div>
      <svg id="svg" viewBox="0 0 460 300" preserveAspectRatio="xMidYMid meet" aria-label="Диаграмма гибки">
        <!-- оси/линии (фон) -->
        <rect x="0" y="0" width="460" height="300" fill="transparent"></rect>
        <g id="diagramGroup" transform="translate(230,170)"></g>
      </svg>
    </div>
  </div>

<script>
(function(){
  const el = (id)=>document.getElementById(id);
  const sEl=el('s'), rEl=el('r'), hEl=el('h'), bEl=el('b'), b1El=el('b1'), typeEl=el('formType');
  const resEl=el('result'), btn=el('btnCalc'), svgGroup=document.getElementById('diagramGroup');

  // безопасный парсинг
  function num(v){ const n=parseFloat(v); return Number.isFinite(n)?n:NaN; }

  function clamp(v,min,max){ return Math.max(min, Math.min(max, v)); }

  function calculateAndRender(){
    const S = num(sEl.value);
    const R = num(rEl.value);
    const H = num(hEl.value);
    const B = num(bEl.value);
    const B1 = num(b1El.value);
    const type = typeEl.value;

    // валидация
    if (!Number.isFinite(S)  !Number.isFinite(R)  !Number.isFinite(H)  !Number.isFinite(B)  !Number.isFinite(B1)) {
      resEl.innerHTML = '<span class="error">Ошибка: заполните все поля корректными числами.</span>';
      return;
    }
    if (S <= 0 || R <= 0) {
      resEl.innerHTML = '<span class="error">Ошибка: толщина и радиус должны быть > 0.</span>';
      return;
    }

    // Улучшенные формулы расчета
    const k = (type === 'p') ? 0.75 : 0.375;
    const RS = Math.round((R/S)*100)/100;
    
    // Более точная формула для длины развертки
    const bendAllowance = (Math.PI * (R + 0.5 * S) * k);
    
    // Расчет угла гибки
    const angle = clamp((bendAllowance / (2 * Math.PI * R)) * 360, 1, 180);
    
    // Улучшенный расчет усилия гибки
    const force = (1.33 * B * S * S * H) / (1000 * R);

    // Округления для показа
    const out = {
      RS: RS,
      bendAllowance: Math.round(bendAllowance*100)/100,
      angle: Math.round(angle*100)/100,
      force: Math.round(force*100)/100
    };

    resEl.innerHTML = 
      <strong>Результаты:</strong><br>
      R / S = <strong>${out.RS}</strong><br>
      Длина дуги (прибл.) = <strong>${out.bendAllowance} мм</strong><br>
      Угол гибки (прибл.) = <strong>${out.angle}°</strong><br>
      Условная сила (прибл.) = <strong>${out.force} кН</strong>
    ;

    renderDiagram(R, S, out.angle);
  }

  function renderDiagram(Rmm, Smm, angleDeg){
    // Очистим
    while(svgGroup.firstChild) svgGroup.removeChild(svgGroup.firstChild);

    // Масштабирование
    const pxPerMm = clamp(120 / Math.max(10, Rmm), 0.5, 6);
    const R = Rmm * pxPerMm;
    const S = Math.max(1, Smm * pxPerMm);

    const ang = clamp(angleDeg, 0.5, 180) * Math.PI/180;
    const half = ang/2;

    // точки дуги
    const x1 = -Math.cos(half) * R;
    const y1 = -Math.sin(half) * R;
    const x2 = Math.cos(half) * R;
    const y2 = -Math.sin(half) * R;

    // фланцы
    const flangeLen = 80;
    const leftFlangeX = x1 - flangeLen * Math.cos(Math.PI/2 - half);
    const leftFlangeY = y1 - flangeLen * Math.sin(Math.PI/2 - half);
    const rightFlangeX = x2 + flangeLen * Math.cos(Math.PI/2 - half);
    const rightFlangeY = y2 - flangeLen * Math.sin(Math.PI/2 - half);

    // создание SVG элементов
    function make(tag, attrs){
      const el = document.createElementNS('http://www.w3.org/2000/svg', tag);
      for(const k in attrs) el.setAttribute(k, attrs[k]);
      return el;
    }

    function makeText(x, y, content, attrs = {}){
      const text = make('text', {x: x, y: y, fill: '#222', 'font-size': '12', ...attrs});
      text.textContent = content;
      return text;
    }

    // flanges
    svgGroup.appendChild(make('line', {x1:leftFlangeX,y1:leftFlangeY,x2:x1,y2:y1,stroke:'#555', 'stroke-width':2, 'stroke-linecap':'round'}));
    svgGroup.appendChild(make('line', {x1:rightFlangeX,y1:rightFlangeY,x2:x2,y2:y2,stroke:'#555', 'stroke-width':2, 'stroke-linecap':'round'}));

    // outer arc
    const largeArc = ang > Math.PI ? 1 : 0;
    const d = M ${x1.toFixed(2)} ${y1.toFixed(2)} A ${R.toFixed(2)} ${R.toFixed(2)} 0 ${largeArc} 1 ${x2.toFixed(2)} ${y2.toFixed(2)};
    svgGroup.appendChild(make('path', {d:d, stroke:'#0077cc', 'stroke-width':3, fill:'none', class:'arc'}));

// inner arc to show thickness
    const Rinner = R - S;
    if(Rinner > 2){
      const x1i = -Math.cos(half) * Rinner;
      const y1i = -Math.sin(half) * Rinner;
      const x2i = Math.cos(half) * Rinner;
      const y2i = -Math.sin(half) * Rinner;
      const di = M ${x1i.toFixed(2)} ${y1i.toFixed(2)} A ${Rinner.toFixed(2)} ${Rinner.toFixed(2)} 0 ${largeArc} 1 ${x2i.toFixed(2)} ${y2i.toFixed(2)};
      svgGroup.appendChild(make('path', {d:di, stroke:'#0077cc', 'stroke-width':1.5, fill:'none', opacity:0.6}));
    }

    // center guide
    svgGroup.appendChild(make('circle', {cx:0,cy:0,r:2,fill:'#333'}));

    // labels
    svgGroup.appendChild(makeText((-40).toFixed(2), (-R-10).toFixed(2), R=${Rmm} мм));
    svgGroup.appendChild(makeText((-40).toFixed(2), (-R+12).toFixed(2), S=${Smm} мм, {fill: '#444'}));
    svgGroup.appendChild(makeText((-40).toFixed(2), (-R+28).toFixed(2), Угол ≈ ${Math.round(angleDeg)}°, {fill: '#0077cc', 'font-weight': '700', 'font-size': '13'}));
  }

  // события
  btn.addEventListener('click', calculateAndRender);
  
  // автоматический пересчет при изменении значений
  [sEl, rEl, hEl, bEl, b1El, typeEl].forEach(e => {
    e.addEventListener('input', calculateAndRender);
  });

  // горячая клавиша Enter
  document.addEventListener('keydown', (ev)=>{
    if(ev.key === 'Enter') { 
      ev.preventDefault(); 
      calculateAndRender(); 
    }
  });

  // расчет при загрузке
  calculateAndRender();
})();
</script>
</body>
</html>
`
